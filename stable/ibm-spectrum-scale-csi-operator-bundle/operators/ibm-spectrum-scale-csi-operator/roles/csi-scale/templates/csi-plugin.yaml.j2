kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: "{{ opName }}"
  namespace: '{{ namespace }}'
spec:
  selector:
    matchLabels:
      app: "{{ opName }}"
  template:
    metadata:
      labels:
       app: "{{ opName }}"
    spec:
{% if pluginNodeSelector|length > 0 %}
      nodeSelector:
{% for pluginNodeSelect in pluginNodeSelector %}
        {{ pluginNodeSelect.key }}: "{{ pluginNodeSelect.value }}"
{% endfor %}
{% endif %}
      serviceAccount: csi-nodeplugin
      hostNetwork: true
      containers:
        - name: driver-registrar
{% if 'apps.openshift.io' in api_groups %}
          securityContext:
            privileged: true
{% endif %}
          image: "{{ driverRegistrar }}"
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          env:
            - name: ADDRESS
              value: /var/lib/kubelet/plugins/csi-spectrum-scale/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/csi-spectrum-scale/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /var/lib/kubelet/plugins/csi-spectrum-scale
            - name: registration-dir
              mountPath: /registration
        - name: csi-spectrum-scale
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          image: "{{ spectrumScale }}"
          args :
            - "--nodeid=$(NODE_ID)"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--v=5"
            - "--drivername=csi-spectrum-scale"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName

            - name: CSI_ENDPOINT
              value: unix:/var/lib/kubelet/plugins/csi-spectrum-scale/csi.sock
            - name: SCALE_HOSTPATH
              value: "{{ scaleHostpath }}"
            - name: SKIP_MOUNT_UNMOUNT
              value: "yes"
            - name: SECRET_TRIGGER
              value: "{{secretCounter}}"
{% if nodeMapping|length > 0 %}
{% for nodemap in nodeMapping %}
            - name: "{{ nodemap.k8sNode }}"
              value: "{{ nodemap.spectrumscaleNode }}"
{% endfor %}
{% endif %}
            # Get refs to the secrets so we can trigger a refresh
          imagePullPolicy: "IfNotPresent" # "Always"
          volumeMounts:
            - name: plugin-dir
              mountPath: /var/lib/kubelet/plugins/csi-spectrum-scale
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet
              mountPropagation: "Bidirectional"
            - mountPath: /dev
              name: host-dev
            - name: "spectrum-scale-config"
              mountPath: /var/lib/ibm/config
            - name: gpfs-classic
              mountPath: "{{ scaleHostpath }}"

            # Grab user clusters
{% for cluster in clustersCamelCase %}
{% if cluster.secrets is defined %}
            - name: "{{ cluster.secrets }}"
              mountPath: "/var/lib/ibm/{{ cluster.secrets }}"
{% endif %}

{% if cluster.cacert is defined %}
            - name: "{{ cluster.cacert }}"
              mountPath: "/var/lib/ibm/{{ cluster.cacert }}"
{% endif %}
{% endfor %}
      volumes:
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/csi-spectrum-scale
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: host-dev
          hostPath:
            path: /dev
        - name: "spectrum-scale-config"
          configMap:
            name: "spectrum-scale-config-json"
        - name: gpfs-classic
          hostPath:
            path: "{{ scaleHostpath }}"
            type: Directory

# Grab user clusters
{% for cluster in clustersCamelCase %}

{% if cluster.secrets is defined %}
        - name: "{{ cluster.secrets }}"
          secret:
            secretName: "{{ cluster.secrets }}"
{% endif %}

{% if cluster.cacert is defined %}
        - name: "{{ cluster.cacert }}"
          configMap:
            name: "{{ cluster.cacert }}"
{% endif %}
{% endfor %}

